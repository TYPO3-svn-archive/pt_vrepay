<?php
/***************************************************************
*  Copyright notice
*  
*  (c) 2008-2009 Rainer Kuhn (kuhn@punkt.de)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is 
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
* 
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
* 
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/
/** 
 * Transaction response class
 *
 * $Id: class.tx_ptvrepay_transactionResponse.php,v 1.17 2009/02/13 15:46:58 ry37 Exp $
 *
 * @author  Rainer Kuhn <kuhn@punkt.de>
 * @since   2008-12-03
 */ 

/**
 * Inclusion of extension specific resources
 */
require_once t3lib_extMgm::extPath('pt_vrepay').'res/class.tx_ptvrepay_transactionException.php';
require_once t3lib_extMgm::extPath('pt_vrepay').'res/class.tx_ptvrepay_transactionAccessor.php';
require_once t3lib_extMgm::extPath('pt_vrepay').'res/class.tx_ptvrepay_log.php';

/**
 * Inclusion of external resources
 */
require_once t3lib_extMgm::extPath('pt_tools').'res/objects/class.tx_pttools_exception.php'; // general exception class
require_once t3lib_extMgm::extPath('pt_tools').'res/staticlib/class.tx_pttools_debug.php'; // debugging class with trace() function
require_once t3lib_extMgm::extPath('pt_tools').'res/staticlib/class.tx_pttools_div.php'; // general static library class
require_once t3lib_extMgm::extPath('pt_tools').'res/staticlib/class.tx_pttools_assert.php'; // assertion class
require_once t3lib_extMgm::extPath('pt_tools').'res/objects/class.tx_pttools_sessionStorageAdapter.php'; // storage adapter for TYPO3 _browser_ sessions
require_once t3lib_extMgm::extPath('pt_tools').'res/abstract/class.tx_pttools_iSettableByArray.php';
require_once t3lib_extMgm::extPath('pt_tools').'res/objects/class.tx_pttools_paymentReturnInformation.php';



/**
 * Transaction response class
 *
 * @package     TYPO3
 * @subpackage  tx_ptvrepay
 * @author      Rainer Kuhn <kuhn@punkt.de>
 * @since       2008-12-01
 */
class tx_ptvrepay_transactionResponse implements tx_pttools_iSettableByArray {
    
    /***************************************************************************
     *   GENERAL PROPERTIES
     **************************************************************************/
    
    /**
     * @var     string      unique transaction identifier (reference number) generated by pt_vrepay (to identify the original transaction request the transaction response was sent for)
     */
    protected $transactionIdentifier;
    
    /*
     * @var string    merchant/shop reference identificator of the related ordering process, e.g. invoice number, confirmation number or booking id
     */
    protected $merchantReference;
    
    /**
     * @var     integer     tx_pttools_paymentReturnInformation::STATUS_SUCCESS | tx_pttools_paymentReturnInformation::STATUS_ERROR | | tx_pttools_paymentReturnInformation::STATUS_ABORT
     * @see     tx_pttools_paymentReturnInformation
     */
    protected $expectedStatus;
    
    /**
     * @var     array      original response params array sent by the payment provider
     */
    protected $providerResponseParamsArray = array();
    
    /***************************************************************************
     *   PROVIDER RESPONSE PROPERTIES: 
     *   named in German using the original VR-ePay response parameter names
     **************************************************************************/
    
    protected $haendlernr = '';     // (string) merchant number
    protected $referenznr = '';     // (string) unique transaction reference number
    protected $betrag = 0;          // (integer) payment amount in smallest unit (e.g. cents for euro: 3,59 EUR -> "359") 
    protected $zahlart = '';        // (string) transaction type: (e.g. "KAUFEN" for buying, "RESERVIEREN" for reserving) see VR-eRay parameter specifications of 'ZAHLART' for further details
    
    protected $status = '';         // (string) transaction status: (e.g. "GEKAUFT" for bought, "ABGELEHNT" for denied) see VR-eRay parameter specifications of 'STATUS' for further details
    protected $rmsg = '';           // (string) return message *text* for transaction errors: see VR-eRay transaction errors list for further details
    
    protected $zeitpunkt = '';      // (string) timestamp of the transaction, e.g. "2004-10-14+10%3A43%3A32.000000"
    protected $antwgeheimnis = '';  // (string) response secret string
    protected $tsaid = '';          // (string) transaction ID from VR-ePay
    
    
    
    /***************************************************************************
     *   CONSTRUCTOR
     **************************************************************************/
     
    /**
     * Class constructor: : set the object's properties
     *
     * @param   string      (optional) transaction identifier: unique refernce number string to build object from response, empty string to create new empty object (=default) 
     * @param   integer     -1 for empty object (=default; if 1st param set to empty string), otherwise: tx_pttools_paymentReturnInformation::STATUS_SUCCESS | tx_pttools_paymentReturnInformation::STATUS_ERROR | | tx_pttools_paymentReturnInformation::STATUS_ABORT
     * @return  void
     * @see     tx_pttools_paymentReturnInformation
     * @throws  exceptionAssertion  if no valid transaction identifier given
     * @throws  exceptionAssertion  if no expected status given
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2008-12-03
     */
    public function __construct($transactionIdentifier='', $expectedStatus=-1) {
        
        tx_pttools_assert::isString($transactionIdentifier, array('message'=>'No valid transaction identifier given'));
        tx_pttools_assert::isInteger($expectedStatus, array('message'=>'No valid expected status given'));
        
        if ($transactionIdentifier != '') {
            tx_pttools_assert::isInList((string)$expectedStatus, 
                                        (string)tx_pttools_paymentReturnInformation::STATUS_SUCCESS.','.(string)tx_pttools_paymentReturnInformation::STATUS_ERROR.','.(string)tx_pttools_paymentReturnInformation::STATUS_ABORT, 
                                        array('message' => 'No valid expected status set for given transaction')
                                       );
            
            $this->transactionIdentifier = $transactionIdentifier;
            $this->expectedStatus = $expectedStatus;
            
            if ($this->expectedStatus == tx_pttools_paymentReturnInformation::STATUS_SUCCESS || $this->expectedStatus == tx_pttools_paymentReturnInformation::STATUS_ERROR) {
                $this->setPropertiesFromStoredResponse();
            }
            
        }
    }
    
    
    
    /***************************************************************************
     *   DOMAIN LOGIC METHODS
     **************************************************************************/

    
    /**
     * Set the object's properties by passing an array to it 
     * 
     * @param   array   array of properties ('propertyName' => 'propertyValue') to be set
     * @return  void
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-04
     */
    public function setPropertiesFromArray(array $dataArray) {
        
        // TODO: create property getter/setter methods and use these within this method
        foreach (get_class_vars(get_class($this)) as $propertyName => $propertyValue) {
            if (isset($dataArray[$propertyName])) {
                $this->$propertyName = $dataArray[$propertyName];
            }
        }
        
        // set original provider response params array
        if (isset($this->haendlernr))   $this->providerResponseParamsArray['HAENDLERNR'] = $this->haendlernr;
        if (isset($this->referenznr))   $this->providerResponseParamsArray['REFERENZNR'] = $this->referenznr;
        if (isset($this->betrag))       $this->providerResponseParamsArray['BETRAG'] = $this->betrag;
        if (isset($this->zahlart))      $this->providerResponseParamsArray['ZAHLART'] = $this->zahlart;
        if (isset($this->status))       $this->providerResponseParamsArray['STATUS'] = $this->status;
        if (isset($this->rmsg))         $this->providerResponseParamsArray['RMSG'] = $this->rmsg;
        if (isset($this->zeitpunkt))    $this->providerResponseParamsArray['ZEITPUNKT'] = $this->zeitpunkt;
        if (isset($this->antwgeheimnis)) $this->providerResponseParamsArray['ANTWGEHEIMNIS'] = $this->antwgeheimnis;
        if (isset($this->tsaid))        $this->providerResponseParamsArray['TSAID'] = $this->tsaid;
        
    }
    
    /**
     * Sets the properties from stored provider response params
     *
     * @param   void
     * @return  void
     * @throws  exceptionAssertion  if no matching request found for current transaction in database 
     * @throws  exceptionAssertion  if valid response params found for current transaction in database
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-04
     */
    protected function setPropertiesFromStoredResponse() {
        
        $transactionRecord = tx_ptvrepay_transactionAccessor::getInstance()->selectTransactionByReferenceNumber($this->transactionIdentifier);
        tx_pttools_assert::isArray($transactionRecord, array('message'=>'No matching request found'));
        
        $this->providerResponseParamsArray = unserialize($transactionRecord['response_params']);
        if (!is_array($this->providerResponseParamsArray) || empty($this->providerResponseParamsArray)) {
            $message = 'No valid response params found in database for transaction ID "'.$this->transactionIdentifier.'" (Note: SSL-enabled webserver required for a VR-Epay response!)';
            throw new tx_ptvrepay_transactionException('noValidResponseParamsFound', $message, $this->transactionIdentifier);
            // TODO: Admin-Mail?
        }
        
        tx_pttools_assert::isNotEmptyArray($this->providerResponseParamsArray, array('message'=>'No valid response params found'));
        foreach ($this->providerResponseParamsArray as $key=>$value) {
            $dataArray[strtolower($key)] = $value;
        }
        $dataArray['merchantReference'] = $transactionRecord['merchant_reference'];
        
        $this->setPropertiesFromArray($dataArray);
        
    }
     
    /**
     * Stores the payment return information in a standardized format (defined in tx_pttools_paymentReturnInformation) into the browser session 
     *
     * @param   void
     * @return  void
     * @see     tx_pttools_paymentReturnInformation
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-04
     */
    public function storeToSession() {
        
        // abort case
        if ($this->expectedStatus == tx_pttools_paymentReturnInformation::STATUS_ABORT) { 
            $epaymentReturnDataArray = array(
                'status' => tx_pttools_paymentReturnInformation::STATUS_ABORT,
            );
        // response case (success or error)
        } else {
            $epaymentReturnDataArray = array(
                'transactionIdentifier' => $this->referenznr,
                'merchantReference' => $this->merchantReference,
                'amount' => ($this->betrag)/100,  // e.g. store Cents in Euro (with two decimal places)
                'status' => $this->getTransactionStatus(false),
                'providerResponseArray' => $this->providerResponseParamsArray,
            );
            if ($this->expectedStatus == tx_pttools_paymentReturnInformation::STATUS_SUCCESS) { 
                $epaymentReturnDataArray['paymentReferenceId'] = $this->tsaid; // TSAID is not sent in case of error (e.g. rejected transaction)
            }
        }
        
        $epaymentReturnDataObj = new tx_pttools_paymentReturnInformation($epaymentReturnDataArray);
        $epaymentReturnDataObj->storeToSession();
        tx_ptvrepay_log::getInstance()->write($this->transactionIdentifier, 'Stored standardized transaction status to session: ', 
                                              tx_ptvrepay_log::MSG_STATUS_INFO, $epaymentReturnDataArray, false); // do not log to devlog here since this is done by pt_tools already 
        
    }
     
    /**
     * Translates the transaction status received with VR-ePay response data to the standardized format of tx_pttools_paymentReturnInformation
     *
     * @param   void
     * @return  integer     tx_pttools_paymentReturnInformation::STATUS_SUCCESS | tx_pttools_paymentReturnInformation::STATUS_ERROR
     * @see     tx_pttools_paymentReturnInformation
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-04
     */
    protected function getTransactionStatus() {
        
        $status = tx_pttools_paymentReturnInformation::STATUS_ERROR;
        
        # TODO: extend for other VR-ePay payment types ("ZAHLART")
                 # || ($this->zahlart == 'RESERVIEREN' && $this->status == 'RESERVIERT')
                 # || ($this->zahlart == 'BUCHEN' && $this->status == 'GEBUCHT')
                 #  || ($this->zahlart == 'GUTSCHREIBEN' && $this->status == 'GUTGESCHRIEBEN')
                 # ...
        if (($this->rmsg == 'Transaktion erfolgreich' || $this->rmsg == 'Transaction successful') && ($this->zahlart == 'KAUFEN' && $this->status == 'GEKAUFT')) {
            $status = tx_pttools_paymentReturnInformation::STATUS_SUCCESS;
        }
        
        return $status;
        
    }
     
    /**
     * Checks if the expected transaction status matches the status retrieved from VR-ePay response data
     *
     * @param   integer     tx_pttools_paymentReturnInformation::STATUS_SUCCESS | tx_pttools_paymentReturnInformation::STATUS_ERROR | tx_pttools_paymentReturnInformation::STATUS_ABORT
     * @return  void
     * @see     tx_pttools_paymentReturnInformation
     * @throws  exceptionAssertion  if expected transaction status does not match status retrieved from stored data
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-06
     */
    public function checkStatus() {
        
        // abort expected
        if ($this->expectedStatus == tx_pttools_paymentReturnInformation::STATUS_ABORT) {        
            $transactionRecord = tx_ptvrepay_transactionAccessor::getInstance()->selectTransactionByReferenceNumber($this->transactionIdentifier);
            if (!empty($transactionRecord['response_params'])) {
                $message = 'Expected abort status "'.$this->expectedStatus.'",  but response params found in database!';
                throw new tx_ptvrepay_transactionException('responseExpectedStatusError', $message, $this->transactionIdentifier);
                // TODO: Admin-Mail?
            }

        // success or error expected
        } elseif ($this->expectedStatus != $this->getTransactionStatus()) {
            $message = 'Expected status "'.$this->expectedStatus.'" does not match retrieved status "'.$this->getTransactionStatus().'"';
            throw new tx_ptvrepay_transactionException('responseExpectedStatusError', $message,  $this->transactionIdentifier);
            // TODO: Admin-Mail?
        }
        
        tx_ptvrepay_transactionAccessor::getInstance()->updateTransactionResult($this->transactionIdentifier, '', array(), (string)$this->expectedStatus);
        tx_ptvrepay_log::getInstance()->write($this->transactionIdentifier, 'Expected transaction status "'.$this->expectedStatus.'" verified and stored to database' , tx_ptvrepay_log::MSG_STATUS_INFO);
        
    }
     
    /**
     * Validates and saves the response params array to the appropriate transaction record of the database
     *
     * @param   array       associative array of POST parameters sent with a VR-ePay response
     * @return  boolean     TRUE on success (exception thrown on error)
     * @throws  tx_pttools_exception   if the query fails/returns false
     * @throws  exceptionAssertion  if no reference number found for validation
     * @throws  exceptionAssertion  if no response secret found for validation
     * @throws  exceptionAssertion  if no response data found for storage
     * @throws  tx_ptvrepay_transactionException   if validation for reference no./transaction id failed
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2008-12-12 
     */
    public function saveProviderResponseParamsToDatabase() {
       
        $result = false;
        
        tx_pttools_assert::isNotEmptyString($this->referenznr, array('message'=>'No reference number found as transaction identifier for validation'));
        tx_pttools_assert::isNotEmptyString($this->antwgeheimnis, array('message'=>'No response secret found for validation'));
        tx_pttools_assert::isNotEmptyArray($this->providerResponseParamsArray, array('message'=>'No response data found for storage'));
        
        if ($this->validateTransactionId($this->referenznr, $this->antwgeheimnis) == true) {
           $result = tx_ptvrepay_transactionAccessor::getInstance()->updateTransactionResult($this->referenznr, '', $this->providerResponseParamsArray);
        } else {
            $message = 'Validation for reference no. "'.$this->referenznr.'" failed! No matching database record found.';
            throw new tx_ptvrepay_transactionException('noRequestIdFoundForResponse', $message, $this->referenznr);
            // TODO: Admin-Mail?
        }
       
       return $result;
    
    }
     
    /**
     * Validates a given transaction id (reference number returned with the response) for a matching already stored request reference number
     *
     * @param   string      transaction id (reference number returned with the response)
     * @param   string      response secret to validate additionally
     * @return  boolean     TRUE if matching stored request id has been found, FALSE otherwise
     * @author  Rainer Kuhn <kuhn@punkt.de>
     * @since   2009-02-04 
     */
    public function validateTransactionId($transactionId, $responseSecret) {
        
        $isValid = true;
        
        if (tx_ptvrepay_transactionAccessor::getInstance()->selectTransactionByReferenceNumber($transactionId, $responseSecret) == false) {
            $isValid = false;
        }
       
       return $isValid;
    
    }
    
    
    
} // end class



/*******************************************************************************
 *   TYPO3 XCLASS INCLUSION (for class extension/overriding)
 ******************************************************************************/
if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/pt_vrepay/res/class.tx_ptvrepay_transactionResponse.php']) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/pt_vrepay/res/class.tx_ptvrepay_transactionResponse.php']);
}

?>
